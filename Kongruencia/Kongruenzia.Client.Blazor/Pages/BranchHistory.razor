@using Kongruencia.Data.Domain.Models
@using System.Net.Http
@using System.Web;
@using Kongruenzia.Client.Blazor.Graphs
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.LineChart
@using ChartJs.Blazor.ChartJS.Common.Time

@inject HttpClient Http

@page "/project/{ProjectName}/branch/{BranchName}"

<h1>Branch History</h1>
<h2>Project: @(ProjectName)</h2>
<h3>Branch: @(BranchName)</h3>

@if (Coverages is null)
{
    <p>Loading ...</p>
}
else
{
    <ChartJsLineChart @ref="_lineChart" Config="@_lineConfig" Width="600" Height="400" />
}

@code {
    [Parameter]
    public string ProjectName { get; set; }
    [Parameter]
    public string BranchName { get; set; }
    public Coverage[] Coverages { get; set; }


    private LineConfig _lineConfig;
    private ChartJsLineChart _lineChart;


    protected override async Task OnInitializedAsync()
    {
        Coverages = await Http.GetJsonAsync<Coverage[]>(
            String.Format(
                    "https://localhost:5001/api/coverages?productName={0}&branchName={1}",
                HttpUtility.UrlEncode(ProjectName),
                HttpUtility.UrlEncode(BranchName)

            ));

        _lineConfig = LineGraphConfig.Create("Statements");

        var statementsDataset = CoverageDataset.Create<TimeTuple<int>>("Total Statements", "#3054e3", "#3054e3");
        statementsDataset.AddRange(Coverages.Select(c => new TimeTuple<int>(new Moment(c.Timestamp), c.Metrics.statements)));

        var coveredStatementsDataset = CoverageDataset.Create<TimeTuple<int>>("Covered Statements", "#3fe330", "#3fe330");
        coveredStatementsDataset.AddRange(Coverages.Select(c => new TimeTuple<int>(new Moment(c.Timestamp), c.Metrics.coveredstatements)));

        var uncoveredStatementsDataset = CoverageDataset.Create<TimeTuple<int>>("Uncovered Statements", "#e33030", "#e33030");
        uncoveredStatementsDataset.AddRange(Coverages.Select(c => new TimeTuple<int>(new Moment(c.Timestamp), c.Metrics.statements - c.Metrics.coveredstatements)));

        _lineConfig.Data.Datasets.Add(statementsDataset);
        _lineConfig.Data.Datasets.Add(coveredStatementsDataset);
        _lineConfig.Data.Datasets.Add(uncoveredStatementsDataset);
    }

}